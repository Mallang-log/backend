package com.mallang.blog.application;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;

import com.mallang.blog.application.command.OpenBlogCommand;
import com.mallang.blog.exception.BlogNameException;
import com.mallang.blog.exception.DuplicateBlogNameException;
import com.mallang.blog.exception.TooManyBlogsException;
import com.mallang.common.ServiceTest;
import com.mallang.member.MemberServiceTestHelper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.DisplayNameGeneration;
import org.junit.jupiter.api.DisplayNameGenerator.ReplaceUnderscores;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.springframework.beans.factory.annotation.Autowired;

@DisplayName("Î∏îÎ°úÍ∑∏ ÏÑúÎπÑÏä§(BlogService) ÏùÄ(Îäî)")
@SuppressWarnings("NonAsciiCharacters")
@DisplayNameGeneration(ReplaceUnderscores.class)
@ServiceTest
class BlogServiceTest {

    @Autowired
    private MemberServiceTestHelper memberServiceTestHelper;

    @Autowired
    private BlogService blogService;

    private Long ÎßêÎûë_ID;

    @Nested
    class Í∞úÏÑ§_Ïãú {

        @BeforeEach
        void setUp() {
            ÎßêÎûë_ID = memberServiceTestHelper.ÌöåÏõêÏùÑ_Ï†ÄÏû•ÌïúÎã§("ÎßêÎûë");
        }

        @Test
        void Î¨∏Ï†ú_ÏóÜÎäîÍ≤ΩÏö∞_Í∞úÏÑ§ÎêúÎã§() {
            // when
            Long ÎßêÎûëÎ∏îÎ°úÍ∑∏_ID = blogService.open(new OpenBlogCommand(ÎßêÎûë_ID, "mallangblog"));

            // then
            assertThat(ÎßêÎûëÎ∏îÎ°úÍ∑∏_ID).isNotNull();
        }

        @Test
        void Î∏îÎ°úÍ∑∏Î•º_ÏÉùÏÑ±ÌïòÎ†§Îäî_ÌöåÏõêÏù¥_Ïù¥ÎØ∏_Îã§Î•∏_Î∏îÎ°úÍ∑∏Î•º_Í∞ÄÏßÄÍ≥†_ÏûàÏúºÎ©¥_ÏòàÏôÄ() {
            // given
            blogService.open(new OpenBlogCommand(ÎßêÎûë_ID, "mallangblog"));

            // when & then
            assertThatThrownBy(() -> {
                blogService.open(new OpenBlogCommand(ÎßêÎûë_ID, "mallangblog2"));
            }).isInstanceOf(TooManyBlogsException.class);
        }

        @Test
        void Ï§ëÎ≥µÎêú_Ïù¥Î¶ÑÏùÑ_Í∞ÄÏßÑ_Îã§Î•∏_Î∏îÎ°úÍ∑∏Í∞Ä_Ï°¥Ïû¨ÌïòÎ©¥_ÏòàÏô∏() {
            // given
            Long ÏïàÎßêÎûë_ID = memberServiceTestHelper.ÌöåÏõêÏùÑ_Ï†ÄÏû•ÌïúÎã§("ÏïàÎßêÎûë");
            blogService.open(new OpenBlogCommand(ÎßêÎûë_ID, "mallangblog"));

            // when & then
            assertThatThrownBy(() -> {
                blogService.open(new OpenBlogCommand(ÏïàÎßêÎûë_ID, "mallangblog"));
            }).isInstanceOf(DuplicateBlogNameException.class);
        }

        @ParameterizedTest
        @ValueSource(strings = {
                "aaaa",
                "01234567890123456789012345678901"
        })
        void Î∏îÎ°úÍ∑∏_Ïù¥Î¶ÑÏùÄ_ÏµúÏÜå_4Ïûê_ÏµúÎåÄ_32Ïûê_Ïù¥ÎÇ¥Ïó¨Ïïº_ÌïúÎã§(String name) {
            // when & then
            assertDoesNotThrow(() -> {
                blogService.open(new OpenBlogCommand(ÎßêÎûë_ID, name));
            });
        }

        @ParameterizedTest
        @ValueSource(strings = {
                "aaa",
                "012345678901234567890123456789012"
        })
        void Î∏îÎ°úÍ∑∏_Ïù¥Î¶ÑÏù¥_4Ïûê_ÎØ∏ÎßåÏù¥Í±∞ÎÇò_32Ïûê_Ï¥àÍ≥ºÏù¥Î©¥_ÏòàÏô∏Ïù¥Îã§(String name) {
            // when & then
            assertThatThrownBy(() ->
                    blogService.open(new OpenBlogCommand(ÎßêÎûë_ID, name))
            ).isInstanceOf(BlogNameException.class);
        }

        @ParameterizedTest
        @ValueSource(strings = {
                "correct-domain-name-1234",
                "2-it-is-also-right-domain-1"
        })
        void Î∏îÎ°úÍ∑∏_Ïù¥Î¶ÑÏùÄ_ÏòÅÎ¨∏_ÏÜåÎ¨∏Ïûê_Ïà´Ïûê_ÌïòÏù¥ÌîàÏúºÎ°úÎßå_Íµ¨ÏÑ±ÎêòÏñ¥Ïïº_ÌïúÎã§(String name) {
            // when & then
            assertDoesNotThrow(() -> {
                blogService.open(new OpenBlogCommand(ÎßêÎûë_ID, name));
            });
        }

        @ParameterizedTest
        @ValueSource(strings = {
                "wrong-Ïù¥Î¶Ñ",
                "it-is-wrong-üëç"
        })
        void Î∏îÎ°úÍ∑∏_Ïù¥Î¶ÑÏóê_ÏòÅÎ¨∏_ÎåÄÎ¨∏Ïûê_ÌïúÍ∏Ä_Ïù¥Î™®ÏßÄ_Ïñ∏ÎçîÎ∞î_Îì±Ïù¥_Îì§Ïñ¥Ïò§Î©¥_ÏòàÏô∏Ïù¥Îã§(String name) {
            // when & then
            assertThatThrownBy(() ->
                    blogService.open(new OpenBlogCommand(ÎßêÎûë_ID, name))
            ).isInstanceOf(BlogNameException.class);
        }

        @ParameterizedTest
        @ValueSource(strings = {
                "wrong--Ïù¥Î¶Ñ",
        })
        void Î∏îÎ°úÍ∑∏_Ïù¥Î¶ÑÏóê_ÌïòÏù¥Ìè∞ÏùÄ_Ïó∞ÏÜçÌï¥ÏÑú_ÏÇ¨Ïö©Ìï†_Ïàò_ÏóÜÎã§(String name) {
            // when & then
            assertThatThrownBy(() ->
                    blogService.open(new OpenBlogCommand(ÎßêÎûë_ID, name))
            ).isInstanceOf(BlogNameException.class);
        }

        @ParameterizedTest
        @ValueSource(strings = {
                "-wrong-Ïù¥Î¶Ñ",
                "wrong-Ïù¥Î¶Ñ-",
        })
        void Î∏îÎ°úÍ∑∏_Ïù¥Î¶ÑÏùÄ_ÌïòÏù¥Ìè∞ÏúºÎ°ú_ÏãúÏûëÌïòÍ±∞ÎÇò_ÎÅùÎÇòÏÑúÎäî_ÏïàÎêúÎã§(String name) {
            // when & then
            assertThatThrownBy(() ->
                    blogService.open(new OpenBlogCommand(ÎßêÎûë_ID, name))
            ).isInstanceOf(BlogNameException.class);
        }
    }
}
