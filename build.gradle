buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0-M1'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'jacoco'
    id 'org.sonarqube' version '4.2.1.3168'
}

group = 'com.mallang.log'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // QueryDSL 설정
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"

    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    testImplementation 'io.rest-assured:rest-assured:5.3.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

def generated = 'src/main/generated'

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
    main.java.srcDirs += [generated]
}

clean {
    delete file(generated)
}

jacoco {
    toolVersion = "0.8.11"
}

test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

def Qdomains = []
for (qPattern in "**/QA".."**/QZ") {
    Qdomains.add(qPattern + "*")
}

def excludeCoverage = [
        '**/*Application*',
        '**/*Exception*',
        '**/*Config*',
        '**/*Constant*',
        '**/dto/**',
        '**/command/**',
        '**/request/**',
        '**/data/**',
        '**/dao/support/*Support*',
        '**/domain/*Repository*',
        '**/auth/infrastructure/oauth/*/**',
        '**/auth/presentation/OauthController*',
] + Qdomains

jacocoTestReport {
    reports {
        xml {
            required = true
            destination file("${buildDir}/jacoco/index.xml")
        }
        csv {
            required = false
        }
        html {
            required = true
            destination file("${buildDir}/jacoco/index.html")
        }
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: excludeCoverage)
                }))
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def QdomainsInVerification = []
    for (qPattern in '*.QA'..'*.QZ') {
        QdomainsInVerification.add(qPattern + '*')
    }
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            excludes = [
                    '*.*Application',
                    '*.*Exception',
                    '*.*Config',
                    '*.*Constant',
                    '*.dto.*',
                    '*.command.*',
                    '*.request.*',
                    '*.data.*',
                    '*.dao.support.*Support',
                    '*.domain.*Repository',
                    '*.auth.infrastructure.oauth.*.*',
                    '*.OauthController',
            ] + QdomainsInVerification

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 1
            }

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
            }
        }
    }
}

sonar {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property "sonar.projectKey", "Mallang-log_backend"
        property "sonar.organization", "mallang-log"
        property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/jacoco/index.xml"
        property 'sonar.exclusions', excludeCoverage
    }
}
